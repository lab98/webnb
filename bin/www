#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require("fs");
var app = require("../app");
var debug = require("debug")("progettowebnb:server");
var http = require("http");
var https = require("https");
var path = require("path");
var mysql = require("mysql");

const options = {
  key: fs.readFileSync(path.join(__dirname, "ssl", "server.key")),
  cert: fs.readFileSync(path.join(__dirname, "ssl", "server.crt")),
};

/**
 * Get port from environment and store in Express.
 */
//var ports=3000;
var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP and HTTPS server.
 */

var server = http.createServer(app);
var servers = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */
servers.listen(port);
/*server.listen(port);*/
servers.on("error", onError);
servers.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * Event listener for HTTPs server "listening" event.
 */

function onListening() {
  var addr = servers.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
/***connection to db
 *
 */

var connection = mysql.createConnection({
  host: "localhost",
  user: "lucalb98",
  password: "lucalb98",
  database: "webnb",
});

connection.connect(function (error) {
  if (!!error) {
    console.log("error not connected");
  } else {
    console.log("Connected...");
  }
});

var sql =
  "insert into utente values(null, 'salvo', 'drago', 'cliente', '1998-12-03','via calabrese 81', 'maschio', 'ciao', 'salvo.drago@libero.it')";
connection.query("SELECT * FROM utente", function (err, rows, fields) {
  if (err) throw err;
  console.log("The solution is: ", rows);

});



connection.end();